//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// Este código-fonte foi gerado automaticamente por Microsoft.VSDesigner, Versão 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace DAL.IntragCotista {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="CotistaServiceSoapBinding", Namespace="http://service.passivo.itau.com")]
    public partial class CotistaServiceService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback atualizarHoldMailOperationCompleted;
        
        private System.Threading.SendOrPostCallback encerrarContaOperationCompleted;
        
        private System.Threading.SendOrPostCallback bloquearDesbloquearCotistaOperationCompleted;
        
        private System.Threading.SendOrPostCallback aprovarAlteracaoCadastralCotistaOperationCompleted;
        
        private System.Threading.SendOrPostCallback alterarSituacaoLegalCotistaOperationCompleted;
        
        private System.Threading.SendOrPostCallback cadastrarAlterarExcluirEnderecoCotistaOperationCompleted;
        
        private System.Threading.SendOrPostCallback cadastrarCotistaPFParcialOperationCompleted;
        
        private System.Threading.SendOrPostCallback cadastrarCotistaPFCompletoOperationCompleted;
        
        private System.Threading.SendOrPostCallback cadastrarCotistaPJParcialOperationCompleted;
        
        private System.Threading.SendOrPostCallback cadastrarCotistaPJCompletoOperationCompleted;
        
        private System.Threading.SendOrPostCallback alterarNomeCpfCnpjCotistaOperationCompleted;
        
        private System.Threading.SendOrPostCallback alterarCotistaPFOperationCompleted;
        
        private System.Threading.SendOrPostCallback alterarCotistaPJOperationCompleted;
        
        private System.Threading.SendOrPostCallback inserirCotitularOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public CotistaServiceService() {
            this.Url = global::DAL.Properties.Settings.Default.DAL_IntragCotista_CotistaServiceService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event atualizarHoldMailCompletedEventHandler atualizarHoldMailCompleted;
        
        /// <remarks/>
        public event encerrarContaCompletedEventHandler encerrarContaCompleted;
        
        /// <remarks/>
        public event bloquearDesbloquearCotistaCompletedEventHandler bloquearDesbloquearCotistaCompleted;
        
        /// <remarks/>
        public event aprovarAlteracaoCadastralCotistaCompletedEventHandler aprovarAlteracaoCadastralCotistaCompleted;
        
        /// <remarks/>
        public event alterarSituacaoLegalCotistaCompletedEventHandler alterarSituacaoLegalCotistaCompleted;
        
        /// <remarks/>
        public event cadastrarAlterarExcluirEnderecoCotistaCompletedEventHandler cadastrarAlterarExcluirEnderecoCotistaCompleted;
        
        /// <remarks/>
        public event cadastrarCotistaPFParcialCompletedEventHandler cadastrarCotistaPFParcialCompleted;
        
        /// <remarks/>
        public event cadastrarCotistaPFCompletoCompletedEventHandler cadastrarCotistaPFCompletoCompleted;
        
        /// <remarks/>
        public event cadastrarCotistaPJParcialCompletedEventHandler cadastrarCotistaPJParcialCompleted;
        
        /// <remarks/>
        public event cadastrarCotistaPJCompletoCompletedEventHandler cadastrarCotistaPJCompletoCompleted;
        
        /// <remarks/>
        public event alterarNomeCpfCnpjCotistaCompletedEventHandler alterarNomeCpfCnpjCotistaCompleted;
        
        /// <remarks/>
        public event alterarCotistaPFCompletedEventHandler alterarCotistaPFCompleted;
        
        /// <remarks/>
        public event alterarCotistaPJCompletedEventHandler alterarCotistaPJCompleted;
        
        /// <remarks/>
        public event inserirCotitularCompletedEventHandler inserirCotitularCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://service.passivo.itau.com", ResponseNamespace="http://service.passivo.itau.com")]
        [return: System.Xml.Serialization.SoapElementAttribute("atualizarHoldMailReturn")]
        public string atualizarHoldMail(string ebusiness, string senha, string codigoBancoGestor, string codigoBancoCliente, string codigoCotista, string emissaoInformeRendimentos, string emissaoAvisoAlteracaoCadastral, string emissaoExtratoMovimentacoes, string emissaoExtratoMensal, string emissaoMalaDireta) {
            object[] results = this.Invoke("atualizarHoldMail", new object[] {
                        ebusiness,
                        senha,
                        codigoBancoGestor,
                        codigoBancoCliente,
                        codigoCotista,
                        emissaoInformeRendimentos,
                        emissaoAvisoAlteracaoCadastral,
                        emissaoExtratoMovimentacoes,
                        emissaoExtratoMensal,
                        emissaoMalaDireta});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void atualizarHoldMailAsync(string ebusiness, string senha, string codigoBancoGestor, string codigoBancoCliente, string codigoCotista, string emissaoInformeRendimentos, string emissaoAvisoAlteracaoCadastral, string emissaoExtratoMovimentacoes, string emissaoExtratoMensal, string emissaoMalaDireta) {
            this.atualizarHoldMailAsync(ebusiness, senha, codigoBancoGestor, codigoBancoCliente, codigoCotista, emissaoInformeRendimentos, emissaoAvisoAlteracaoCadastral, emissaoExtratoMovimentacoes, emissaoExtratoMensal, emissaoMalaDireta, null);
        }
        
        /// <remarks/>
        public void atualizarHoldMailAsync(string ebusiness, string senha, string codigoBancoGestor, string codigoBancoCliente, string codigoCotista, string emissaoInformeRendimentos, string emissaoAvisoAlteracaoCadastral, string emissaoExtratoMovimentacoes, string emissaoExtratoMensal, string emissaoMalaDireta, object userState) {
            if ((this.atualizarHoldMailOperationCompleted == null)) {
                this.atualizarHoldMailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnatualizarHoldMailOperationCompleted);
            }
            this.InvokeAsync("atualizarHoldMail", new object[] {
                        ebusiness,
                        senha,
                        codigoBancoGestor,
                        codigoBancoCliente,
                        codigoCotista,
                        emissaoInformeRendimentos,
                        emissaoAvisoAlteracaoCadastral,
                        emissaoExtratoMovimentacoes,
                        emissaoExtratoMensal,
                        emissaoMalaDireta}, this.atualizarHoldMailOperationCompleted, userState);
        }
        
        private void OnatualizarHoldMailOperationCompleted(object arg) {
            if ((this.atualizarHoldMailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.atualizarHoldMailCompleted(this, new atualizarHoldMailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://service.passivo.itau.com", ResponseNamespace="http://service.passivo.itau.com")]
        [return: System.Xml.Serialization.SoapElementAttribute("encerrarContaReturn")]
        public string encerrarConta(string ebusiness, string senha, string codigoBancoGestor, string codigoBancoCliente, string codigoCotista) {
            object[] results = this.Invoke("encerrarConta", new object[] {
                        ebusiness,
                        senha,
                        codigoBancoGestor,
                        codigoBancoCliente,
                        codigoCotista});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void encerrarContaAsync(string ebusiness, string senha, string codigoBancoGestor, string codigoBancoCliente, string codigoCotista) {
            this.encerrarContaAsync(ebusiness, senha, codigoBancoGestor, codigoBancoCliente, codigoCotista, null);
        }
        
        /// <remarks/>
        public void encerrarContaAsync(string ebusiness, string senha, string codigoBancoGestor, string codigoBancoCliente, string codigoCotista, object userState) {
            if ((this.encerrarContaOperationCompleted == null)) {
                this.encerrarContaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnencerrarContaOperationCompleted);
            }
            this.InvokeAsync("encerrarConta", new object[] {
                        ebusiness,
                        senha,
                        codigoBancoGestor,
                        codigoBancoCliente,
                        codigoCotista}, this.encerrarContaOperationCompleted, userState);
        }
        
        private void OnencerrarContaOperationCompleted(object arg) {
            if ((this.encerrarContaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.encerrarContaCompleted(this, new encerrarContaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://service.passivo.itau.com", ResponseNamespace="http://service.passivo.itau.com")]
        [return: System.Xml.Serialization.SoapElementAttribute("bloquearDesbloquearCotistaReturn")]
        public string bloquearDesbloquearCotista(string ebusiness, string senha, string codigoBancoGestor, string codigoBancoCliente, string codigoCotista, string codigoFundo, string subConta, string operacao, string motivo) {
            object[] results = this.Invoke("bloquearDesbloquearCotista", new object[] {
                        ebusiness,
                        senha,
                        codigoBancoGestor,
                        codigoBancoCliente,
                        codigoCotista,
                        codigoFundo,
                        subConta,
                        operacao,
                        motivo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void bloquearDesbloquearCotistaAsync(string ebusiness, string senha, string codigoBancoGestor, string codigoBancoCliente, string codigoCotista, string codigoFundo, string subConta, string operacao, string motivo) {
            this.bloquearDesbloquearCotistaAsync(ebusiness, senha, codigoBancoGestor, codigoBancoCliente, codigoCotista, codigoFundo, subConta, operacao, motivo, null);
        }
        
        /// <remarks/>
        public void bloquearDesbloquearCotistaAsync(string ebusiness, string senha, string codigoBancoGestor, string codigoBancoCliente, string codigoCotista, string codigoFundo, string subConta, string operacao, string motivo, object userState) {
            if ((this.bloquearDesbloquearCotistaOperationCompleted == null)) {
                this.bloquearDesbloquearCotistaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnbloquearDesbloquearCotistaOperationCompleted);
            }
            this.InvokeAsync("bloquearDesbloquearCotista", new object[] {
                        ebusiness,
                        senha,
                        codigoBancoGestor,
                        codigoBancoCliente,
                        codigoCotista,
                        codigoFundo,
                        subConta,
                        operacao,
                        motivo}, this.bloquearDesbloquearCotistaOperationCompleted, userState);
        }
        
        private void OnbloquearDesbloquearCotistaOperationCompleted(object arg) {
            if ((this.bloquearDesbloquearCotistaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.bloquearDesbloquearCotistaCompleted(this, new bloquearDesbloquearCotistaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://service.passivo.itau.com", ResponseNamespace="http://service.passivo.itau.com")]
        [return: System.Xml.Serialization.SoapElementAttribute("aprovarAlteracaoCadastralCotistaReturn")]
        public string aprovarAlteracaoCadastralCotista(string ebusiness, string senha, string codigoBancoGestor, string codigoBancoCliente, string codigoCotista, string flagAprovarRejeitar) {
            object[] results = this.Invoke("aprovarAlteracaoCadastralCotista", new object[] {
                        ebusiness,
                        senha,
                        codigoBancoGestor,
                        codigoBancoCliente,
                        codigoCotista,
                        flagAprovarRejeitar});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void aprovarAlteracaoCadastralCotistaAsync(string ebusiness, string senha, string codigoBancoGestor, string codigoBancoCliente, string codigoCotista, string flagAprovarRejeitar) {
            this.aprovarAlteracaoCadastralCotistaAsync(ebusiness, senha, codigoBancoGestor, codigoBancoCliente, codigoCotista, flagAprovarRejeitar, null);
        }
        
        /// <remarks/>
        public void aprovarAlteracaoCadastralCotistaAsync(string ebusiness, string senha, string codigoBancoGestor, string codigoBancoCliente, string codigoCotista, string flagAprovarRejeitar, object userState) {
            if ((this.aprovarAlteracaoCadastralCotistaOperationCompleted == null)) {
                this.aprovarAlteracaoCadastralCotistaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaprovarAlteracaoCadastralCotistaOperationCompleted);
            }
            this.InvokeAsync("aprovarAlteracaoCadastralCotista", new object[] {
                        ebusiness,
                        senha,
                        codigoBancoGestor,
                        codigoBancoCliente,
                        codigoCotista,
                        flagAprovarRejeitar}, this.aprovarAlteracaoCadastralCotistaOperationCompleted, userState);
        }
        
        private void OnaprovarAlteracaoCadastralCotistaOperationCompleted(object arg) {
            if ((this.aprovarAlteracaoCadastralCotistaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.aprovarAlteracaoCadastralCotistaCompleted(this, new aprovarAlteracaoCadastralCotistaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://service.passivo.itau.com", ResponseNamespace="http://service.passivo.itau.com")]
        [return: System.Xml.Serialization.SoapElementAttribute("alterarSituacaoLegalCotistaReturn")]
        public string alterarSituacaoLegalCotista(string ebusiness, string senha, string codigoBancoGestor, string codigoBancoCliente, string codigoCotista, string flagTipoSituacaoLegal) {
            object[] results = this.Invoke("alterarSituacaoLegalCotista", new object[] {
                        ebusiness,
                        senha,
                        codigoBancoGestor,
                        codigoBancoCliente,
                        codigoCotista,
                        flagTipoSituacaoLegal});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void alterarSituacaoLegalCotistaAsync(string ebusiness, string senha, string codigoBancoGestor, string codigoBancoCliente, string codigoCotista, string flagTipoSituacaoLegal) {
            this.alterarSituacaoLegalCotistaAsync(ebusiness, senha, codigoBancoGestor, codigoBancoCliente, codigoCotista, flagTipoSituacaoLegal, null);
        }
        
        /// <remarks/>
        public void alterarSituacaoLegalCotistaAsync(string ebusiness, string senha, string codigoBancoGestor, string codigoBancoCliente, string codigoCotista, string flagTipoSituacaoLegal, object userState) {
            if ((this.alterarSituacaoLegalCotistaOperationCompleted == null)) {
                this.alterarSituacaoLegalCotistaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnalterarSituacaoLegalCotistaOperationCompleted);
            }
            this.InvokeAsync("alterarSituacaoLegalCotista", new object[] {
                        ebusiness,
                        senha,
                        codigoBancoGestor,
                        codigoBancoCliente,
                        codigoCotista,
                        flagTipoSituacaoLegal}, this.alterarSituacaoLegalCotistaOperationCompleted, userState);
        }
        
        private void OnalterarSituacaoLegalCotistaOperationCompleted(object arg) {
            if ((this.alterarSituacaoLegalCotistaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.alterarSituacaoLegalCotistaCompleted(this, new alterarSituacaoLegalCotistaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://service.passivo.itau.com", ResponseNamespace="http://service.passivo.itau.com")]
        [return: System.Xml.Serialization.SoapElementAttribute("cadastrarAlterarExcluirEnderecoCotistaReturn")]
        public string cadastrarAlterarExcluirEnderecoCotista(
                    string ebusiness, 
                    string senha, 
                    string codigoBancoGestor, 
                    string codigoBancoCliente, 
                    string codigoCotista, 
                    string tipoEndereco, 
                    string logradouro, 
                    string numero, 
                    string complemento, 
                    string bairro, 
                    string cidade, 
                    string estado, 
                    string cep, 
                    string correspondencia, 
                    string tipoOperacao, 
                    string codigoPaisResidencia, 
                    string logradouroResidencial, 
                    string numeroResidencial, 
                    string complementoResidencial, 
                    string bairroResidencial, 
                    string cidadeResidencial, 
                    string estadoResidencial, 
                    string codigoPostalINR) {
            object[] results = this.Invoke("cadastrarAlterarExcluirEnderecoCotista", new object[] {
                        ebusiness,
                        senha,
                        codigoBancoGestor,
                        codigoBancoCliente,
                        codigoCotista,
                        tipoEndereco,
                        logradouro,
                        numero,
                        complemento,
                        bairro,
                        cidade,
                        estado,
                        cep,
                        correspondencia,
                        tipoOperacao,
                        codigoPaisResidencia,
                        logradouroResidencial,
                        numeroResidencial,
                        complementoResidencial,
                        bairroResidencial,
                        cidadeResidencial,
                        estadoResidencial,
                        codigoPostalINR});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void cadastrarAlterarExcluirEnderecoCotistaAsync(
                    string ebusiness, 
                    string senha, 
                    string codigoBancoGestor, 
                    string codigoBancoCliente, 
                    string codigoCotista, 
                    string tipoEndereco, 
                    string logradouro, 
                    string numero, 
                    string complemento, 
                    string bairro, 
                    string cidade, 
                    string estado, 
                    string cep, 
                    string correspondencia, 
                    string tipoOperacao, 
                    string codigoPaisResidencia, 
                    string logradouroResidencial, 
                    string numeroResidencial, 
                    string complementoResidencial, 
                    string bairroResidencial, 
                    string cidadeResidencial, 
                    string estadoResidencial, 
                    string codigoPostalINR) {
            this.cadastrarAlterarExcluirEnderecoCotistaAsync(ebusiness, senha, codigoBancoGestor, codigoBancoCliente, codigoCotista, tipoEndereco, logradouro, numero, complemento, bairro, cidade, estado, cep, correspondencia, tipoOperacao, codigoPaisResidencia, logradouroResidencial, numeroResidencial, complementoResidencial, bairroResidencial, cidadeResidencial, estadoResidencial, codigoPostalINR, null);
        }
        
        /// <remarks/>
        public void cadastrarAlterarExcluirEnderecoCotistaAsync(
                    string ebusiness, 
                    string senha, 
                    string codigoBancoGestor, 
                    string codigoBancoCliente, 
                    string codigoCotista, 
                    string tipoEndereco, 
                    string logradouro, 
                    string numero, 
                    string complemento, 
                    string bairro, 
                    string cidade, 
                    string estado, 
                    string cep, 
                    string correspondencia, 
                    string tipoOperacao, 
                    string codigoPaisResidencia, 
                    string logradouroResidencial, 
                    string numeroResidencial, 
                    string complementoResidencial, 
                    string bairroResidencial, 
                    string cidadeResidencial, 
                    string estadoResidencial, 
                    string codigoPostalINR, 
                    object userState) {
            if ((this.cadastrarAlterarExcluirEnderecoCotistaOperationCompleted == null)) {
                this.cadastrarAlterarExcluirEnderecoCotistaOperationCompleted = new System.Threading.SendOrPostCallback(this.OncadastrarAlterarExcluirEnderecoCotistaOperationCompleted);
            }
            this.InvokeAsync("cadastrarAlterarExcluirEnderecoCotista", new object[] {
                        ebusiness,
                        senha,
                        codigoBancoGestor,
                        codigoBancoCliente,
                        codigoCotista,
                        tipoEndereco,
                        logradouro,
                        numero,
                        complemento,
                        bairro,
                        cidade,
                        estado,
                        cep,
                        correspondencia,
                        tipoOperacao,
                        codigoPaisResidencia,
                        logradouroResidencial,
                        numeroResidencial,
                        complementoResidencial,
                        bairroResidencial,
                        cidadeResidencial,
                        estadoResidencial,
                        codigoPostalINR}, this.cadastrarAlterarExcluirEnderecoCotistaOperationCompleted, userState);
        }
        
        private void OncadastrarAlterarExcluirEnderecoCotistaOperationCompleted(object arg) {
            if ((this.cadastrarAlterarExcluirEnderecoCotistaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.cadastrarAlterarExcluirEnderecoCotistaCompleted(this, new cadastrarAlterarExcluirEnderecoCotistaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://service.passivo.itau.com", ResponseNamespace="http://service.passivo.itau.com")]
        [return: System.Xml.Serialization.SoapElementAttribute("cadastrarCotistaPFParcialReturn")]
        public string cadastrarCotistaPFParcial(
                    string ebusiness, 
                    string senha, 
                    string codigoBancoGestor, 
                    string codigoBancoCliente, 
                    string cpfCnpjCotista, 
                    string nomeCotista, 
                    string dataNascimentoCotista, 
                    string situacaoTributariaCotista, 
                    string situacaoLegalCotista, 
                    string emissaoExtratoMensal, 
                    string indicadorPessoa, 
                    string contaOrdem, 
                    string codigoCidadeNaturalidade, 
                    string informeRendimentos, 
                    string email, 
                    string cotistaVinculado, 
                    string avisoAlteracaoCadastral, 
                    string emissaoExtratoMovimentacoes, 
                    string malaDireta) {
            object[] results = this.Invoke("cadastrarCotistaPFParcial", new object[] {
                        ebusiness,
                        senha,
                        codigoBancoGestor,
                        codigoBancoCliente,
                        cpfCnpjCotista,
                        nomeCotista,
                        dataNascimentoCotista,
                        situacaoTributariaCotista,
                        situacaoLegalCotista,
                        emissaoExtratoMensal,
                        indicadorPessoa,
                        contaOrdem,
                        codigoCidadeNaturalidade,
                        informeRendimentos,
                        email,
                        cotistaVinculado,
                        avisoAlteracaoCadastral,
                        emissaoExtratoMovimentacoes,
                        malaDireta});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void cadastrarCotistaPFParcialAsync(
                    string ebusiness, 
                    string senha, 
                    string codigoBancoGestor, 
                    string codigoBancoCliente, 
                    string cpfCnpjCotista, 
                    string nomeCotista, 
                    string dataNascimentoCotista, 
                    string situacaoTributariaCotista, 
                    string situacaoLegalCotista, 
                    string emissaoExtratoMensal, 
                    string indicadorPessoa, 
                    string contaOrdem, 
                    string codigoCidadeNaturalidade, 
                    string informeRendimentos, 
                    string email, 
                    string cotistaVinculado, 
                    string avisoAlteracaoCadastral, 
                    string emissaoExtratoMovimentacoes, 
                    string malaDireta) {
            this.cadastrarCotistaPFParcialAsync(ebusiness, senha, codigoBancoGestor, codigoBancoCliente, cpfCnpjCotista, nomeCotista, dataNascimentoCotista, situacaoTributariaCotista, situacaoLegalCotista, emissaoExtratoMensal, indicadorPessoa, contaOrdem, codigoCidadeNaturalidade, informeRendimentos, email, cotistaVinculado, avisoAlteracaoCadastral, emissaoExtratoMovimentacoes, malaDireta, null);
        }
        
        /// <remarks/>
        public void cadastrarCotistaPFParcialAsync(
                    string ebusiness, 
                    string senha, 
                    string codigoBancoGestor, 
                    string codigoBancoCliente, 
                    string cpfCnpjCotista, 
                    string nomeCotista, 
                    string dataNascimentoCotista, 
                    string situacaoTributariaCotista, 
                    string situacaoLegalCotista, 
                    string emissaoExtratoMensal, 
                    string indicadorPessoa, 
                    string contaOrdem, 
                    string codigoCidadeNaturalidade, 
                    string informeRendimentos, 
                    string email, 
                    string cotistaVinculado, 
                    string avisoAlteracaoCadastral, 
                    string emissaoExtratoMovimentacoes, 
                    string malaDireta, 
                    object userState) {
            if ((this.cadastrarCotistaPFParcialOperationCompleted == null)) {
                this.cadastrarCotistaPFParcialOperationCompleted = new System.Threading.SendOrPostCallback(this.OncadastrarCotistaPFParcialOperationCompleted);
            }
            this.InvokeAsync("cadastrarCotistaPFParcial", new object[] {
                        ebusiness,
                        senha,
                        codigoBancoGestor,
                        codigoBancoCliente,
                        cpfCnpjCotista,
                        nomeCotista,
                        dataNascimentoCotista,
                        situacaoTributariaCotista,
                        situacaoLegalCotista,
                        emissaoExtratoMensal,
                        indicadorPessoa,
                        contaOrdem,
                        codigoCidadeNaturalidade,
                        informeRendimentos,
                        email,
                        cotistaVinculado,
                        avisoAlteracaoCadastral,
                        emissaoExtratoMovimentacoes,
                        malaDireta}, this.cadastrarCotistaPFParcialOperationCompleted, userState);
        }
        
        private void OncadastrarCotistaPFParcialOperationCompleted(object arg) {
            if ((this.cadastrarCotistaPFParcialCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.cadastrarCotistaPFParcialCompleted(this, new cadastrarCotistaPFParcialCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://service.passivo.itau.com", ResponseNamespace="http://service.passivo.itau.com")]
        [return: System.Xml.Serialization.SoapElementAttribute("cadastrarCotistaPFCompletoReturn")]
        public string cadastrarCotistaPFCompleto(
                    string ebusiness, 
                    string senha, 
                    string codigoBancoGestor, 
                    string codigoBancoCliente, 
                    string cpfCnpjCotista, 
                    string nomeCotista, 
                    string dataNascimentoCotista, 
                    string situacaoTributariaCotista, 
                    string situacaoLegalCotista, 
                    string emissaoExtratoMensal, 
                    string indicadorPessoa, 
                    string contaOrdem, 
                    string codigoCidadeNaturalidade, 
                    string informeRendimento, 
                    string tipoDocumentoCotista, 
                    string numeroDocumentoCotista, 
                    string dataExpedicaoDocumentoCotista, 
                    string orgaoExpeditorDocumento, 
                    string estadoEmissorDocumentoCotista, 
                    string sexo, 
                    string codigoEstadoCivilCotista, 
                    string profissao, 
                    string email, 
                    string assessor, 
                    string codigoGestorCliente, 
                    string emissaoExtratoMovimentacoes, 
                    string tipoPessoaCotista, 
                    string valorRendaFamiliar, 
                    string valorPatrimonio, 
                    string codigoDistribuidor, 
                    string nomePai, 
                    string nomeMae, 
                    string avisoMovimentacoes, 
                    string renovacaoCadastral, 
                    string codigoNacionalidade, 
                    string paisResidencia, 
                    string resolucao2689, 
                    string nomeConjuge, 
                    string numeroDDD1, 
                    string telefone1, 
                    string ramal1, 
                    string numeroDDD2, 
                    string telefone2, 
                    string ramal2, 
                    string numeroDDD3, 
                    string telefone3, 
                    string ramal3, 
                    string numeroIdentificacaoFiscal, 
                    string dataComunicadoFormalizacaoSaida, 
                    string dataInicioResidente, 
                    string dataFimResidente, 
                    string cotistaVinculado, 
                    string avisoAlteracaoCadastral, 
                    string malaDireta) {
            object[] results = this.Invoke("cadastrarCotistaPFCompleto", new object[] {
                        ebusiness,
                        senha,
                        codigoBancoGestor,
                        codigoBancoCliente,
                        cpfCnpjCotista,
                        nomeCotista,
                        dataNascimentoCotista,
                        situacaoTributariaCotista,
                        situacaoLegalCotista,
                        emissaoExtratoMensal,
                        indicadorPessoa,
                        contaOrdem,
                        codigoCidadeNaturalidade,
                        informeRendimento,
                        tipoDocumentoCotista,
                        numeroDocumentoCotista,
                        dataExpedicaoDocumentoCotista,
                        orgaoExpeditorDocumento,
                        estadoEmissorDocumentoCotista,
                        sexo,
                        codigoEstadoCivilCotista,
                        profissao,
                        email,
                        assessor,
                        codigoGestorCliente,
                        emissaoExtratoMovimentacoes,
                        tipoPessoaCotista,
                        valorRendaFamiliar,
                        valorPatrimonio,
                        codigoDistribuidor,
                        nomePai,
                        nomeMae,
                        avisoMovimentacoes,
                        renovacaoCadastral,
                        codigoNacionalidade,
                        paisResidencia,
                        resolucao2689,
                        nomeConjuge,
                        numeroDDD1,
                        telefone1,
                        ramal1,
                        numeroDDD2,
                        telefone2,
                        ramal2,
                        numeroDDD3,
                        telefone3,
                        ramal3,
                        numeroIdentificacaoFiscal,
                        dataComunicadoFormalizacaoSaida,
                        dataInicioResidente,
                        dataFimResidente,
                        cotistaVinculado,
                        avisoAlteracaoCadastral,
                        malaDireta});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void cadastrarCotistaPFCompletoAsync(
                    string ebusiness, 
                    string senha, 
                    string codigoBancoGestor, 
                    string codigoBancoCliente, 
                    string cpfCnpjCotista, 
                    string nomeCotista, 
                    string dataNascimentoCotista, 
                    string situacaoTributariaCotista, 
                    string situacaoLegalCotista, 
                    string emissaoExtratoMensal, 
                    string indicadorPessoa, 
                    string contaOrdem, 
                    string codigoCidadeNaturalidade, 
                    string informeRendimento, 
                    string tipoDocumentoCotista, 
                    string numeroDocumentoCotista, 
                    string dataExpedicaoDocumentoCotista, 
                    string orgaoExpeditorDocumento, 
                    string estadoEmissorDocumentoCotista, 
                    string sexo, 
                    string codigoEstadoCivilCotista, 
                    string profissao, 
                    string email, 
                    string assessor, 
                    string codigoGestorCliente, 
                    string emissaoExtratoMovimentacoes, 
                    string tipoPessoaCotista, 
                    string valorRendaFamiliar, 
                    string valorPatrimonio, 
                    string codigoDistribuidor, 
                    string nomePai, 
                    string nomeMae, 
                    string avisoMovimentacoes, 
                    string renovacaoCadastral, 
                    string codigoNacionalidade, 
                    string paisResidencia, 
                    string resolucao2689, 
                    string nomeConjuge, 
                    string numeroDDD1, 
                    string telefone1, 
                    string ramal1, 
                    string numeroDDD2, 
                    string telefone2, 
                    string ramal2, 
                    string numeroDDD3, 
                    string telefone3, 
                    string ramal3, 
                    string numeroIdentificacaoFiscal, 
                    string dataComunicadoFormalizacaoSaida, 
                    string dataInicioResidente, 
                    string dataFimResidente, 
                    string cotistaVinculado, 
                    string avisoAlteracaoCadastral, 
                    string malaDireta) {
            this.cadastrarCotistaPFCompletoAsync(ebusiness, senha, codigoBancoGestor, codigoBancoCliente, cpfCnpjCotista, nomeCotista, dataNascimentoCotista, situacaoTributariaCotista, situacaoLegalCotista, emissaoExtratoMensal, indicadorPessoa, contaOrdem, codigoCidadeNaturalidade, informeRendimento, tipoDocumentoCotista, numeroDocumentoCotista, dataExpedicaoDocumentoCotista, orgaoExpeditorDocumento, estadoEmissorDocumentoCotista, sexo, codigoEstadoCivilCotista, profissao, email, assessor, codigoGestorCliente, emissaoExtratoMovimentacoes, tipoPessoaCotista, valorRendaFamiliar, valorPatrimonio, codigoDistribuidor, nomePai, nomeMae, avisoMovimentacoes, renovacaoCadastral, codigoNacionalidade, paisResidencia, resolucao2689, nomeConjuge, numeroDDD1, telefone1, ramal1, numeroDDD2, telefone2, ramal2, numeroDDD3, telefone3, ramal3, numeroIdentificacaoFiscal, dataComunicadoFormalizacaoSaida, dataInicioResidente, dataFimResidente, cotistaVinculado, avisoAlteracaoCadastral, malaDireta, null);
        }
        
        /// <remarks/>
        public void cadastrarCotistaPFCompletoAsync(
                    string ebusiness, 
                    string senha, 
                    string codigoBancoGestor, 
                    string codigoBancoCliente, 
                    string cpfCnpjCotista, 
                    string nomeCotista, 
                    string dataNascimentoCotista, 
                    string situacaoTributariaCotista, 
                    string situacaoLegalCotista, 
                    string emissaoExtratoMensal, 
                    string indicadorPessoa, 
                    string contaOrdem, 
                    string codigoCidadeNaturalidade, 
                    string informeRendimento, 
                    string tipoDocumentoCotista, 
                    string numeroDocumentoCotista, 
                    string dataExpedicaoDocumentoCotista, 
                    string orgaoExpeditorDocumento, 
                    string estadoEmissorDocumentoCotista, 
                    string sexo, 
                    string codigoEstadoCivilCotista, 
                    string profissao, 
                    string email, 
                    string assessor, 
                    string codigoGestorCliente, 
                    string emissaoExtratoMovimentacoes, 
                    string tipoPessoaCotista, 
                    string valorRendaFamiliar, 
                    string valorPatrimonio, 
                    string codigoDistribuidor, 
                    string nomePai, 
                    string nomeMae, 
                    string avisoMovimentacoes, 
                    string renovacaoCadastral, 
                    string codigoNacionalidade, 
                    string paisResidencia, 
                    string resolucao2689, 
                    string nomeConjuge, 
                    string numeroDDD1, 
                    string telefone1, 
                    string ramal1, 
                    string numeroDDD2, 
                    string telefone2, 
                    string ramal2, 
                    string numeroDDD3, 
                    string telefone3, 
                    string ramal3, 
                    string numeroIdentificacaoFiscal, 
                    string dataComunicadoFormalizacaoSaida, 
                    string dataInicioResidente, 
                    string dataFimResidente, 
                    string cotistaVinculado, 
                    string avisoAlteracaoCadastral, 
                    string malaDireta, 
                    object userState) {
            if ((this.cadastrarCotistaPFCompletoOperationCompleted == null)) {
                this.cadastrarCotistaPFCompletoOperationCompleted = new System.Threading.SendOrPostCallback(this.OncadastrarCotistaPFCompletoOperationCompleted);
            }
            this.InvokeAsync("cadastrarCotistaPFCompleto", new object[] {
                        ebusiness,
                        senha,
                        codigoBancoGestor,
                        codigoBancoCliente,
                        cpfCnpjCotista,
                        nomeCotista,
                        dataNascimentoCotista,
                        situacaoTributariaCotista,
                        situacaoLegalCotista,
                        emissaoExtratoMensal,
                        indicadorPessoa,
                        contaOrdem,
                        codigoCidadeNaturalidade,
                        informeRendimento,
                        tipoDocumentoCotista,
                        numeroDocumentoCotista,
                        dataExpedicaoDocumentoCotista,
                        orgaoExpeditorDocumento,
                        estadoEmissorDocumentoCotista,
                        sexo,
                        codigoEstadoCivilCotista,
                        profissao,
                        email,
                        assessor,
                        codigoGestorCliente,
                        emissaoExtratoMovimentacoes,
                        tipoPessoaCotista,
                        valorRendaFamiliar,
                        valorPatrimonio,
                        codigoDistribuidor,
                        nomePai,
                        nomeMae,
                        avisoMovimentacoes,
                        renovacaoCadastral,
                        codigoNacionalidade,
                        paisResidencia,
                        resolucao2689,
                        nomeConjuge,
                        numeroDDD1,
                        telefone1,
                        ramal1,
                        numeroDDD2,
                        telefone2,
                        ramal2,
                        numeroDDD3,
                        telefone3,
                        ramal3,
                        numeroIdentificacaoFiscal,
                        dataComunicadoFormalizacaoSaida,
                        dataInicioResidente,
                        dataFimResidente,
                        cotistaVinculado,
                        avisoAlteracaoCadastral,
                        malaDireta}, this.cadastrarCotistaPFCompletoOperationCompleted, userState);
        }
        
        private void OncadastrarCotistaPFCompletoOperationCompleted(object arg) {
            if ((this.cadastrarCotistaPFCompletoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.cadastrarCotistaPFCompletoCompleted(this, new cadastrarCotistaPFCompletoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://service.passivo.itau.com", ResponseNamespace="http://service.passivo.itau.com")]
        [return: System.Xml.Serialization.SoapElementAttribute("cadastrarCotistaPJParcialReturn")]
        public string cadastrarCotistaPJParcial(
                    string ebusiness, 
                    string senha, 
                    string codigoBancoGestor, 
                    string codigoBancoCliente, 
                    string cpfCnpjCotista, 
                    string nomeCotista, 
                    string situacaoTributariaCotista, 
                    string emissaoExtratoMensal, 
                    string indicadorPessoa, 
                    string contaOrdem, 
                    string codigoLocalidade, 
                    string informeRendimentos, 
                    string email, 
                    string cotistaVinculado, 
                    string avisoAlteracaoCadastral, 
                    string malaDireta, 
                    string emissaoExtratoMovimentacoes) {
            object[] results = this.Invoke("cadastrarCotistaPJParcial", new object[] {
                        ebusiness,
                        senha,
                        codigoBancoGestor,
                        codigoBancoCliente,
                        cpfCnpjCotista,
                        nomeCotista,
                        situacaoTributariaCotista,
                        emissaoExtratoMensal,
                        indicadorPessoa,
                        contaOrdem,
                        codigoLocalidade,
                        informeRendimentos,
                        email,
                        cotistaVinculado,
                        avisoAlteracaoCadastral,
                        malaDireta,
                        emissaoExtratoMovimentacoes});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void cadastrarCotistaPJParcialAsync(
                    string ebusiness, 
                    string senha, 
                    string codigoBancoGestor, 
                    string codigoBancoCliente, 
                    string cpfCnpjCotista, 
                    string nomeCotista, 
                    string situacaoTributariaCotista, 
                    string emissaoExtratoMensal, 
                    string indicadorPessoa, 
                    string contaOrdem, 
                    string codigoLocalidade, 
                    string informeRendimentos, 
                    string email, 
                    string cotistaVinculado, 
                    string avisoAlteracaoCadastral, 
                    string malaDireta, 
                    string emissaoExtratoMovimentacoes) {
            this.cadastrarCotistaPJParcialAsync(ebusiness, senha, codigoBancoGestor, codigoBancoCliente, cpfCnpjCotista, nomeCotista, situacaoTributariaCotista, emissaoExtratoMensal, indicadorPessoa, contaOrdem, codigoLocalidade, informeRendimentos, email, cotistaVinculado, avisoAlteracaoCadastral, malaDireta, emissaoExtratoMovimentacoes, null);
        }
        
        /// <remarks/>
        public void cadastrarCotistaPJParcialAsync(
                    string ebusiness, 
                    string senha, 
                    string codigoBancoGestor, 
                    string codigoBancoCliente, 
                    string cpfCnpjCotista, 
                    string nomeCotista, 
                    string situacaoTributariaCotista, 
                    string emissaoExtratoMensal, 
                    string indicadorPessoa, 
                    string contaOrdem, 
                    string codigoLocalidade, 
                    string informeRendimentos, 
                    string email, 
                    string cotistaVinculado, 
                    string avisoAlteracaoCadastral, 
                    string malaDireta, 
                    string emissaoExtratoMovimentacoes, 
                    object userState) {
            if ((this.cadastrarCotistaPJParcialOperationCompleted == null)) {
                this.cadastrarCotistaPJParcialOperationCompleted = new System.Threading.SendOrPostCallback(this.OncadastrarCotistaPJParcialOperationCompleted);
            }
            this.InvokeAsync("cadastrarCotistaPJParcial", new object[] {
                        ebusiness,
                        senha,
                        codigoBancoGestor,
                        codigoBancoCliente,
                        cpfCnpjCotista,
                        nomeCotista,
                        situacaoTributariaCotista,
                        emissaoExtratoMensal,
                        indicadorPessoa,
                        contaOrdem,
                        codigoLocalidade,
                        informeRendimentos,
                        email,
                        cotistaVinculado,
                        avisoAlteracaoCadastral,
                        malaDireta,
                        emissaoExtratoMovimentacoes}, this.cadastrarCotistaPJParcialOperationCompleted, userState);
        }
        
        private void OncadastrarCotistaPJParcialOperationCompleted(object arg) {
            if ((this.cadastrarCotistaPJParcialCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.cadastrarCotistaPJParcialCompleted(this, new cadastrarCotistaPJParcialCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://service.passivo.itau.com", ResponseNamespace="http://service.passivo.itau.com")]
        [return: System.Xml.Serialization.SoapElementAttribute("cadastrarCotistaPJCompletoReturn")]
        public string cadastrarCotistaPJCompleto(
                    string ebusiness, 
                    string senha, 
                    string codigoBancoGestor, 
                    string codigoBancoCliente, 
                    string cpfCnpjCotista, 
                    string nomeCotista, 
                    string situacaoTributariaCotista, 
                    string emissaoExtratoMensal, 
                    string indicadorPessoa, 
                    string contaOrdem, 
                    string codigoLocalidade, 
                    string informeRendimentos, 
                    string tipoDocumento, 
                    string numeroDocumento, 
                    string dataExpedicaoDocumento, 
                    string orgaoExpeditorDocumento, 
                    string estadoEmissorDocumento, 
                    string ramoAtividade, 
                    string codigoFormaConstituicaoEmp, 
                    string email, 
                    string assessor, 
                    string codigoGestorCliente, 
                    string emissaoExtratoMovimentacoes, 
                    string tipoPessoaCotista, 
                    string valorRendaEmpresa, 
                    string valorPatrimonio, 
                    string codigoCetip, 
                    string codigoDistribuidor, 
                    string avisoMovimentacoes, 
                    string renovacaoCadastral, 
                    string codigoNacionalidade, 
                    string paisResidencia, 
                    string resolucao2689, 
                    string dataConstituicaoEmpresa, 
                    string numeroDDD1, 
                    string telefone1, 
                    string ramal1, 
                    string numeroDDD2, 
                    string telefone2, 
                    string ramal2, 
                    string numeroDDD3, 
                    string telefone3, 
                    string ramal3, 
                    string numeroIdentificacaoFiscal, 
                    string dataComunicadoFormalizacaoSaida, 
                    string dataInicioResidente, 
                    string dataFimResidente, 
                    string cotistaVinculado, 
                    string malaDireta, 
                    string avisoAlteracaoCadastral) {
            object[] results = this.Invoke("cadastrarCotistaPJCompleto", new object[] {
                        ebusiness,
                        senha,
                        codigoBancoGestor,
                        codigoBancoCliente,
                        cpfCnpjCotista,
                        nomeCotista,
                        situacaoTributariaCotista,
                        emissaoExtratoMensal,
                        indicadorPessoa,
                        contaOrdem,
                        codigoLocalidade,
                        informeRendimentos,
                        tipoDocumento,
                        numeroDocumento,
                        dataExpedicaoDocumento,
                        orgaoExpeditorDocumento,
                        estadoEmissorDocumento,
                        ramoAtividade,
                        codigoFormaConstituicaoEmp,
                        email,
                        assessor,
                        codigoGestorCliente,
                        emissaoExtratoMovimentacoes,
                        tipoPessoaCotista,
                        valorRendaEmpresa,
                        valorPatrimonio,
                        codigoCetip,
                        codigoDistribuidor,
                        avisoMovimentacoes,
                        renovacaoCadastral,
                        codigoNacionalidade,
                        paisResidencia,
                        resolucao2689,
                        dataConstituicaoEmpresa,
                        numeroDDD1,
                        telefone1,
                        ramal1,
                        numeroDDD2,
                        telefone2,
                        ramal2,
                        numeroDDD3,
                        telefone3,
                        ramal3,
                        numeroIdentificacaoFiscal,
                        dataComunicadoFormalizacaoSaida,
                        dataInicioResidente,
                        dataFimResidente,
                        cotistaVinculado,
                        malaDireta,
                        avisoAlteracaoCadastral});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void cadastrarCotistaPJCompletoAsync(
                    string ebusiness, 
                    string senha, 
                    string codigoBancoGestor, 
                    string codigoBancoCliente, 
                    string cpfCnpjCotista, 
                    string nomeCotista, 
                    string situacaoTributariaCotista, 
                    string emissaoExtratoMensal, 
                    string indicadorPessoa, 
                    string contaOrdem, 
                    string codigoLocalidade, 
                    string informeRendimentos, 
                    string tipoDocumento, 
                    string numeroDocumento, 
                    string dataExpedicaoDocumento, 
                    string orgaoExpeditorDocumento, 
                    string estadoEmissorDocumento, 
                    string ramoAtividade, 
                    string codigoFormaConstituicaoEmp, 
                    string email, 
                    string assessor, 
                    string codigoGestorCliente, 
                    string emissaoExtratoMovimentacoes, 
                    string tipoPessoaCotista, 
                    string valorRendaEmpresa, 
                    string valorPatrimonio, 
                    string codigoCetip, 
                    string codigoDistribuidor, 
                    string avisoMovimentacoes, 
                    string renovacaoCadastral, 
                    string codigoNacionalidade, 
                    string paisResidencia, 
                    string resolucao2689, 
                    string dataConstituicaoEmpresa, 
                    string numeroDDD1, 
                    string telefone1, 
                    string ramal1, 
                    string numeroDDD2, 
                    string telefone2, 
                    string ramal2, 
                    string numeroDDD3, 
                    string telefone3, 
                    string ramal3, 
                    string numeroIdentificacaoFiscal, 
                    string dataComunicadoFormalizacaoSaida, 
                    string dataInicioResidente, 
                    string dataFimResidente, 
                    string cotistaVinculado, 
                    string malaDireta, 
                    string avisoAlteracaoCadastral) {
            this.cadastrarCotistaPJCompletoAsync(ebusiness, senha, codigoBancoGestor, codigoBancoCliente, cpfCnpjCotista, nomeCotista, situacaoTributariaCotista, emissaoExtratoMensal, indicadorPessoa, contaOrdem, codigoLocalidade, informeRendimentos, tipoDocumento, numeroDocumento, dataExpedicaoDocumento, orgaoExpeditorDocumento, estadoEmissorDocumento, ramoAtividade, codigoFormaConstituicaoEmp, email, assessor, codigoGestorCliente, emissaoExtratoMovimentacoes, tipoPessoaCotista, valorRendaEmpresa, valorPatrimonio, codigoCetip, codigoDistribuidor, avisoMovimentacoes, renovacaoCadastral, codigoNacionalidade, paisResidencia, resolucao2689, dataConstituicaoEmpresa, numeroDDD1, telefone1, ramal1, numeroDDD2, telefone2, ramal2, numeroDDD3, telefone3, ramal3, numeroIdentificacaoFiscal, dataComunicadoFormalizacaoSaida, dataInicioResidente, dataFimResidente, cotistaVinculado, malaDireta, avisoAlteracaoCadastral, null);
        }
        
        /// <remarks/>
        public void cadastrarCotistaPJCompletoAsync(
                    string ebusiness, 
                    string senha, 
                    string codigoBancoGestor, 
                    string codigoBancoCliente, 
                    string cpfCnpjCotista, 
                    string nomeCotista, 
                    string situacaoTributariaCotista, 
                    string emissaoExtratoMensal, 
                    string indicadorPessoa, 
                    string contaOrdem, 
                    string codigoLocalidade, 
                    string informeRendimentos, 
                    string tipoDocumento, 
                    string numeroDocumento, 
                    string dataExpedicaoDocumento, 
                    string orgaoExpeditorDocumento, 
                    string estadoEmissorDocumento, 
                    string ramoAtividade, 
                    string codigoFormaConstituicaoEmp, 
                    string email, 
                    string assessor, 
                    string codigoGestorCliente, 
                    string emissaoExtratoMovimentacoes, 
                    string tipoPessoaCotista, 
                    string valorRendaEmpresa, 
                    string valorPatrimonio, 
                    string codigoCetip, 
                    string codigoDistribuidor, 
                    string avisoMovimentacoes, 
                    string renovacaoCadastral, 
                    string codigoNacionalidade, 
                    string paisResidencia, 
                    string resolucao2689, 
                    string dataConstituicaoEmpresa, 
                    string numeroDDD1, 
                    string telefone1, 
                    string ramal1, 
                    string numeroDDD2, 
                    string telefone2, 
                    string ramal2, 
                    string numeroDDD3, 
                    string telefone3, 
                    string ramal3, 
                    string numeroIdentificacaoFiscal, 
                    string dataComunicadoFormalizacaoSaida, 
                    string dataInicioResidente, 
                    string dataFimResidente, 
                    string cotistaVinculado, 
                    string malaDireta, 
                    string avisoAlteracaoCadastral, 
                    object userState) {
            if ((this.cadastrarCotistaPJCompletoOperationCompleted == null)) {
                this.cadastrarCotistaPJCompletoOperationCompleted = new System.Threading.SendOrPostCallback(this.OncadastrarCotistaPJCompletoOperationCompleted);
            }
            this.InvokeAsync("cadastrarCotistaPJCompleto", new object[] {
                        ebusiness,
                        senha,
                        codigoBancoGestor,
                        codigoBancoCliente,
                        cpfCnpjCotista,
                        nomeCotista,
                        situacaoTributariaCotista,
                        emissaoExtratoMensal,
                        indicadorPessoa,
                        contaOrdem,
                        codigoLocalidade,
                        informeRendimentos,
                        tipoDocumento,
                        numeroDocumento,
                        dataExpedicaoDocumento,
                        orgaoExpeditorDocumento,
                        estadoEmissorDocumento,
                        ramoAtividade,
                        codigoFormaConstituicaoEmp,
                        email,
                        assessor,
                        codigoGestorCliente,
                        emissaoExtratoMovimentacoes,
                        tipoPessoaCotista,
                        valorRendaEmpresa,
                        valorPatrimonio,
                        codigoCetip,
                        codigoDistribuidor,
                        avisoMovimentacoes,
                        renovacaoCadastral,
                        codigoNacionalidade,
                        paisResidencia,
                        resolucao2689,
                        dataConstituicaoEmpresa,
                        numeroDDD1,
                        telefone1,
                        ramal1,
                        numeroDDD2,
                        telefone2,
                        ramal2,
                        numeroDDD3,
                        telefone3,
                        ramal3,
                        numeroIdentificacaoFiscal,
                        dataComunicadoFormalizacaoSaida,
                        dataInicioResidente,
                        dataFimResidente,
                        cotistaVinculado,
                        malaDireta,
                        avisoAlteracaoCadastral}, this.cadastrarCotistaPJCompletoOperationCompleted, userState);
        }
        
        private void OncadastrarCotistaPJCompletoOperationCompleted(object arg) {
            if ((this.cadastrarCotistaPJCompletoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.cadastrarCotistaPJCompletoCompleted(this, new cadastrarCotistaPJCompletoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://service.passivo.itau.com", ResponseNamespace="http://service.passivo.itau.com")]
        [return: System.Xml.Serialization.SoapElementAttribute("alterarNomeCpfCnpjCotistaReturn")]
        public string alterarNomeCpfCnpjCotista(string ebusiness, string senha, string codigoBancoGestor, string codigoBancoCliente, string codigoCotista, string nomeCotista, string cpfCnpjCotista, string indicadorTitularidade, string tipoPessoa) {
            object[] results = this.Invoke("alterarNomeCpfCnpjCotista", new object[] {
                        ebusiness,
                        senha,
                        codigoBancoGestor,
                        codigoBancoCliente,
                        codigoCotista,
                        nomeCotista,
                        cpfCnpjCotista,
                        indicadorTitularidade,
                        tipoPessoa});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void alterarNomeCpfCnpjCotistaAsync(string ebusiness, string senha, string codigoBancoGestor, string codigoBancoCliente, string codigoCotista, string nomeCotista, string cpfCnpjCotista, string indicadorTitularidade, string tipoPessoa) {
            this.alterarNomeCpfCnpjCotistaAsync(ebusiness, senha, codigoBancoGestor, codigoBancoCliente, codigoCotista, nomeCotista, cpfCnpjCotista, indicadorTitularidade, tipoPessoa, null);
        }
        
        /// <remarks/>
        public void alterarNomeCpfCnpjCotistaAsync(string ebusiness, string senha, string codigoBancoGestor, string codigoBancoCliente, string codigoCotista, string nomeCotista, string cpfCnpjCotista, string indicadorTitularidade, string tipoPessoa, object userState) {
            if ((this.alterarNomeCpfCnpjCotistaOperationCompleted == null)) {
                this.alterarNomeCpfCnpjCotistaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnalterarNomeCpfCnpjCotistaOperationCompleted);
            }
            this.InvokeAsync("alterarNomeCpfCnpjCotista", new object[] {
                        ebusiness,
                        senha,
                        codigoBancoGestor,
                        codigoBancoCliente,
                        codigoCotista,
                        nomeCotista,
                        cpfCnpjCotista,
                        indicadorTitularidade,
                        tipoPessoa}, this.alterarNomeCpfCnpjCotistaOperationCompleted, userState);
        }
        
        private void OnalterarNomeCpfCnpjCotistaOperationCompleted(object arg) {
            if ((this.alterarNomeCpfCnpjCotistaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.alterarNomeCpfCnpjCotistaCompleted(this, new alterarNomeCpfCnpjCotistaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://service.passivo.itau.com", ResponseNamespace="http://service.passivo.itau.com")]
        [return: System.Xml.Serialization.SoapElementAttribute("alterarCotistaPFReturn")]
        public string alterarCotistaPF(
                    string ebusiness, 
                    string senha, 
                    string codigoBancoGestor, 
                    string codigoBancoCliente, 
                    string dataNascimentoCotista, 
                    string codigoCotista, 
                    string tipoDocumentoCotista, 
                    string numeroDocumentoCotista, 
                    string dataExpedicaoDocumentoCotista, 
                    string orgaoExpeditorDocumento, 
                    string estadoEmissorDocumentoCotista, 
                    string indicadorImposto, 
                    string sexo, 
                    string codigoEstadoCivilCotista, 
                    string profissao, 
                    string numeroDDD1, 
                    string telefone1, 
                    string ramal1, 
                    string email, 
                    string assessor, 
                    string idCotistaGestor, 
                    string idExtratoMensal, 
                    string emissaoExtratoMovimentacoes, 
                    string tipoCotista, 
                    string valorRendaFamiliar, 
                    string valorPatrimonio, 
                    string codigoDistribuidor, 
                    string nomePai, 
                    string nomeMae, 
                    string indicadorPEP, 
                    string avisoMovimentacoes, 
                    string renovacaoCadastral, 
                    string codigoNacionalidade, 
                    string paisResidencia, 
                    string resolucao2689, 
                    string indicadorContaOrdem, 
                    string codigoNaturalidade, 
                    string nomeConjuge, 
                    string numeroDDD2, 
                    string telefone2, 
                    string ramal2, 
                    string numeroDDD3, 
                    string telefone3, 
                    string ramal3, 
                    string numeroIdentificacaoFiscal, 
                    string dataComunicadoFormalizacaoSaida, 
                    string dataInicioResidente, 
                    string dataFimResidente, 
                    string cotistaVinculado, 
                    string informeRendimento, 
                    string avisoAlteracaoCadastral, 
                    string malaDireta) {
            object[] results = this.Invoke("alterarCotistaPF", new object[] {
                        ebusiness,
                        senha,
                        codigoBancoGestor,
                        codigoBancoCliente,
                        dataNascimentoCotista,
                        codigoCotista,
                        tipoDocumentoCotista,
                        numeroDocumentoCotista,
                        dataExpedicaoDocumentoCotista,
                        orgaoExpeditorDocumento,
                        estadoEmissorDocumentoCotista,
                        indicadorImposto,
                        sexo,
                        codigoEstadoCivilCotista,
                        profissao,
                        numeroDDD1,
                        telefone1,
                        ramal1,
                        email,
                        assessor,
                        idCotistaGestor,
                        idExtratoMensal,
                        emissaoExtratoMovimentacoes,
                        tipoCotista,
                        valorRendaFamiliar,
                        valorPatrimonio,
                        codigoDistribuidor,
                        nomePai,
                        nomeMae,
                        indicadorPEP,
                        avisoMovimentacoes,
                        renovacaoCadastral,
                        codigoNacionalidade,
                        paisResidencia,
                        resolucao2689,
                        indicadorContaOrdem,
                        codigoNaturalidade,
                        nomeConjuge,
                        numeroDDD2,
                        telefone2,
                        ramal2,
                        numeroDDD3,
                        telefone3,
                        ramal3,
                        numeroIdentificacaoFiscal,
                        dataComunicadoFormalizacaoSaida,
                        dataInicioResidente,
                        dataFimResidente,
                        cotistaVinculado,
                        informeRendimento,
                        avisoAlteracaoCadastral,
                        malaDireta});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void alterarCotistaPFAsync(
                    string ebusiness, 
                    string senha, 
                    string codigoBancoGestor, 
                    string codigoBancoCliente, 
                    string dataNascimentoCotista, 
                    string codigoCotista, 
                    string tipoDocumentoCotista, 
                    string numeroDocumentoCotista, 
                    string dataExpedicaoDocumentoCotista, 
                    string orgaoExpeditorDocumento, 
                    string estadoEmissorDocumentoCotista, 
                    string indicadorImposto, 
                    string sexo, 
                    string codigoEstadoCivilCotista, 
                    string profissao, 
                    string numeroDDD1, 
                    string telefone1, 
                    string ramal1, 
                    string email, 
                    string assessor, 
                    string idCotistaGestor, 
                    string idExtratoMensal, 
                    string emissaoExtratoMovimentacoes, 
                    string tipoCotista, 
                    string valorRendaFamiliar, 
                    string valorPatrimonio, 
                    string codigoDistribuidor, 
                    string nomePai, 
                    string nomeMae, 
                    string indicadorPEP, 
                    string avisoMovimentacoes, 
                    string renovacaoCadastral, 
                    string codigoNacionalidade, 
                    string paisResidencia, 
                    string resolucao2689, 
                    string indicadorContaOrdem, 
                    string codigoNaturalidade, 
                    string nomeConjuge, 
                    string numeroDDD2, 
                    string telefone2, 
                    string ramal2, 
                    string numeroDDD3, 
                    string telefone3, 
                    string ramal3, 
                    string numeroIdentificacaoFiscal, 
                    string dataComunicadoFormalizacaoSaida, 
                    string dataInicioResidente, 
                    string dataFimResidente, 
                    string cotistaVinculado, 
                    string informeRendimento, 
                    string avisoAlteracaoCadastral, 
                    string malaDireta) {
            this.alterarCotistaPFAsync(ebusiness, senha, codigoBancoGestor, codigoBancoCliente, dataNascimentoCotista, codigoCotista, tipoDocumentoCotista, numeroDocumentoCotista, dataExpedicaoDocumentoCotista, orgaoExpeditorDocumento, estadoEmissorDocumentoCotista, indicadorImposto, sexo, codigoEstadoCivilCotista, profissao, numeroDDD1, telefone1, ramal1, email, assessor, idCotistaGestor, idExtratoMensal, emissaoExtratoMovimentacoes, tipoCotista, valorRendaFamiliar, valorPatrimonio, codigoDistribuidor, nomePai, nomeMae, indicadorPEP, avisoMovimentacoes, renovacaoCadastral, codigoNacionalidade, paisResidencia, resolucao2689, indicadorContaOrdem, codigoNaturalidade, nomeConjuge, numeroDDD2, telefone2, ramal2, numeroDDD3, telefone3, ramal3, numeroIdentificacaoFiscal, dataComunicadoFormalizacaoSaida, dataInicioResidente, dataFimResidente, cotistaVinculado, informeRendimento, avisoAlteracaoCadastral, malaDireta, null);
        }
        
        /// <remarks/>
        public void alterarCotistaPFAsync(
                    string ebusiness, 
                    string senha, 
                    string codigoBancoGestor, 
                    string codigoBancoCliente, 
                    string dataNascimentoCotista, 
                    string codigoCotista, 
                    string tipoDocumentoCotista, 
                    string numeroDocumentoCotista, 
                    string dataExpedicaoDocumentoCotista, 
                    string orgaoExpeditorDocumento, 
                    string estadoEmissorDocumentoCotista, 
                    string indicadorImposto, 
                    string sexo, 
                    string codigoEstadoCivilCotista, 
                    string profissao, 
                    string numeroDDD1, 
                    string telefone1, 
                    string ramal1, 
                    string email, 
                    string assessor, 
                    string idCotistaGestor, 
                    string idExtratoMensal, 
                    string emissaoExtratoMovimentacoes, 
                    string tipoCotista, 
                    string valorRendaFamiliar, 
                    string valorPatrimonio, 
                    string codigoDistribuidor, 
                    string nomePai, 
                    string nomeMae, 
                    string indicadorPEP, 
                    string avisoMovimentacoes, 
                    string renovacaoCadastral, 
                    string codigoNacionalidade, 
                    string paisResidencia, 
                    string resolucao2689, 
                    string indicadorContaOrdem, 
                    string codigoNaturalidade, 
                    string nomeConjuge, 
                    string numeroDDD2, 
                    string telefone2, 
                    string ramal2, 
                    string numeroDDD3, 
                    string telefone3, 
                    string ramal3, 
                    string numeroIdentificacaoFiscal, 
                    string dataComunicadoFormalizacaoSaida, 
                    string dataInicioResidente, 
                    string dataFimResidente, 
                    string cotistaVinculado, 
                    string informeRendimento, 
                    string avisoAlteracaoCadastral, 
                    string malaDireta, 
                    object userState) {
            if ((this.alterarCotistaPFOperationCompleted == null)) {
                this.alterarCotistaPFOperationCompleted = new System.Threading.SendOrPostCallback(this.OnalterarCotistaPFOperationCompleted);
            }
            this.InvokeAsync("alterarCotistaPF", new object[] {
                        ebusiness,
                        senha,
                        codigoBancoGestor,
                        codigoBancoCliente,
                        dataNascimentoCotista,
                        codigoCotista,
                        tipoDocumentoCotista,
                        numeroDocumentoCotista,
                        dataExpedicaoDocumentoCotista,
                        orgaoExpeditorDocumento,
                        estadoEmissorDocumentoCotista,
                        indicadorImposto,
                        sexo,
                        codigoEstadoCivilCotista,
                        profissao,
                        numeroDDD1,
                        telefone1,
                        ramal1,
                        email,
                        assessor,
                        idCotistaGestor,
                        idExtratoMensal,
                        emissaoExtratoMovimentacoes,
                        tipoCotista,
                        valorRendaFamiliar,
                        valorPatrimonio,
                        codigoDistribuidor,
                        nomePai,
                        nomeMae,
                        indicadorPEP,
                        avisoMovimentacoes,
                        renovacaoCadastral,
                        codigoNacionalidade,
                        paisResidencia,
                        resolucao2689,
                        indicadorContaOrdem,
                        codigoNaturalidade,
                        nomeConjuge,
                        numeroDDD2,
                        telefone2,
                        ramal2,
                        numeroDDD3,
                        telefone3,
                        ramal3,
                        numeroIdentificacaoFiscal,
                        dataComunicadoFormalizacaoSaida,
                        dataInicioResidente,
                        dataFimResidente,
                        cotistaVinculado,
                        informeRendimento,
                        avisoAlteracaoCadastral,
                        malaDireta}, this.alterarCotistaPFOperationCompleted, userState);
        }
        
        private void OnalterarCotistaPFOperationCompleted(object arg) {
            if ((this.alterarCotistaPFCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.alterarCotistaPFCompleted(this, new alterarCotistaPFCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://service.passivo.itau.com", ResponseNamespace="http://service.passivo.itau.com")]
        [return: System.Xml.Serialization.SoapElementAttribute("alterarCotistaPJReturn")]
        public string alterarCotistaPJ(
                    string ebusiness, 
                    string senha, 
                    string codigoBancoGestor, 
                    string codigoBancoCliente, 
                    string codigoCotista, 
                    string tipoDocumentoCotista, 
                    string numeroDocumentoCotista, 
                    string dataExpedicaoDocumentoCotista, 
                    string orgaoExpeditorDocumento, 
                    string estadoEmissorDocumentoCotista, 
                    string indicadorImposto, 
                    string ramoAtividade, 
                    string codigoFormaConstituicaoEmp, 
                    string numeroDDD1, 
                    string telefone1, 
                    string ramal1, 
                    string email, 
                    string assessor, 
                    string idCotistaGestor, 
                    string idExtratoMensal, 
                    string emissaoExtratoMovimentacoes, 
                    string tipoCotista, 
                    string valorRendaEmpresa, 
                    string valorPatrimonio, 
                    string codigoCetip, 
                    string codigoDistribuidor, 
                    string indicadorPEP, 
                    string avisoMovimentacoes, 
                    string renovacaoCadastral, 
                    string codigoNacionalidade, 
                    string paisResidencia, 
                    string resolucao2689, 
                    string contaOrdem, 
                    string codigoLocalidade, 
                    string dataConstituicao, 
                    string numeroDDD2, 
                    string telefone2, 
                    string ramal2, 
                    string numeroDDD3, 
                    string telefone3, 
                    string ramal3, 
                    string numeroIdentificacaoFiscal, 
                    string dataComunicadoFormalizacaoSaida, 
                    string dataInicioResidente, 
                    string dataFimResidente, 
                    string cotistaVinculado, 
                    string emissaoInformeRendimentos, 
                    string emissaoAlteracaoCadastral, 
                    string emissaoMalaDireta) {
            object[] results = this.Invoke("alterarCotistaPJ", new object[] {
                        ebusiness,
                        senha,
                        codigoBancoGestor,
                        codigoBancoCliente,
                        codigoCotista,
                        tipoDocumentoCotista,
                        numeroDocumentoCotista,
                        dataExpedicaoDocumentoCotista,
                        orgaoExpeditorDocumento,
                        estadoEmissorDocumentoCotista,
                        indicadorImposto,
                        ramoAtividade,
                        codigoFormaConstituicaoEmp,
                        numeroDDD1,
                        telefone1,
                        ramal1,
                        email,
                        assessor,
                        idCotistaGestor,
                        idExtratoMensal,
                        emissaoExtratoMovimentacoes,
                        tipoCotista,
                        valorRendaEmpresa,
                        valorPatrimonio,
                        codigoCetip,
                        codigoDistribuidor,
                        indicadorPEP,
                        avisoMovimentacoes,
                        renovacaoCadastral,
                        codigoNacionalidade,
                        paisResidencia,
                        resolucao2689,
                        contaOrdem,
                        codigoLocalidade,
                        dataConstituicao,
                        numeroDDD2,
                        telefone2,
                        ramal2,
                        numeroDDD3,
                        telefone3,
                        ramal3,
                        numeroIdentificacaoFiscal,
                        dataComunicadoFormalizacaoSaida,
                        dataInicioResidente,
                        dataFimResidente,
                        cotistaVinculado,
                        emissaoInformeRendimentos,
                        emissaoAlteracaoCadastral,
                        emissaoMalaDireta});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void alterarCotistaPJAsync(
                    string ebusiness, 
                    string senha, 
                    string codigoBancoGestor, 
                    string codigoBancoCliente, 
                    string codigoCotista, 
                    string tipoDocumentoCotista, 
                    string numeroDocumentoCotista, 
                    string dataExpedicaoDocumentoCotista, 
                    string orgaoExpeditorDocumento, 
                    string estadoEmissorDocumentoCotista, 
                    string indicadorImposto, 
                    string ramoAtividade, 
                    string codigoFormaConstituicaoEmp, 
                    string numeroDDD1, 
                    string telefone1, 
                    string ramal1, 
                    string email, 
                    string assessor, 
                    string idCotistaGestor, 
                    string idExtratoMensal, 
                    string emissaoExtratoMovimentacoes, 
                    string tipoCotista, 
                    string valorRendaEmpresa, 
                    string valorPatrimonio, 
                    string codigoCetip, 
                    string codigoDistribuidor, 
                    string indicadorPEP, 
                    string avisoMovimentacoes, 
                    string renovacaoCadastral, 
                    string codigoNacionalidade, 
                    string paisResidencia, 
                    string resolucao2689, 
                    string contaOrdem, 
                    string codigoLocalidade, 
                    string dataConstituicao, 
                    string numeroDDD2, 
                    string telefone2, 
                    string ramal2, 
                    string numeroDDD3, 
                    string telefone3, 
                    string ramal3, 
                    string numeroIdentificacaoFiscal, 
                    string dataComunicadoFormalizacaoSaida, 
                    string dataInicioResidente, 
                    string dataFimResidente, 
                    string cotistaVinculado, 
                    string emissaoInformeRendimentos, 
                    string emissaoAlteracaoCadastral, 
                    string emissaoMalaDireta) {
            this.alterarCotistaPJAsync(ebusiness, senha, codigoBancoGestor, codigoBancoCliente, codigoCotista, tipoDocumentoCotista, numeroDocumentoCotista, dataExpedicaoDocumentoCotista, orgaoExpeditorDocumento, estadoEmissorDocumentoCotista, indicadorImposto, ramoAtividade, codigoFormaConstituicaoEmp, numeroDDD1, telefone1, ramal1, email, assessor, idCotistaGestor, idExtratoMensal, emissaoExtratoMovimentacoes, tipoCotista, valorRendaEmpresa, valorPatrimonio, codigoCetip, codigoDistribuidor, indicadorPEP, avisoMovimentacoes, renovacaoCadastral, codigoNacionalidade, paisResidencia, resolucao2689, contaOrdem, codigoLocalidade, dataConstituicao, numeroDDD2, telefone2, ramal2, numeroDDD3, telefone3, ramal3, numeroIdentificacaoFiscal, dataComunicadoFormalizacaoSaida, dataInicioResidente, dataFimResidente, cotistaVinculado, emissaoInformeRendimentos, emissaoAlteracaoCadastral, emissaoMalaDireta, null);
        }
        
        /// <remarks/>
        public void alterarCotistaPJAsync(
                    string ebusiness, 
                    string senha, 
                    string codigoBancoGestor, 
                    string codigoBancoCliente, 
                    string codigoCotista, 
                    string tipoDocumentoCotista, 
                    string numeroDocumentoCotista, 
                    string dataExpedicaoDocumentoCotista, 
                    string orgaoExpeditorDocumento, 
                    string estadoEmissorDocumentoCotista, 
                    string indicadorImposto, 
                    string ramoAtividade, 
                    string codigoFormaConstituicaoEmp, 
                    string numeroDDD1, 
                    string telefone1, 
                    string ramal1, 
                    string email, 
                    string assessor, 
                    string idCotistaGestor, 
                    string idExtratoMensal, 
                    string emissaoExtratoMovimentacoes, 
                    string tipoCotista, 
                    string valorRendaEmpresa, 
                    string valorPatrimonio, 
                    string codigoCetip, 
                    string codigoDistribuidor, 
                    string indicadorPEP, 
                    string avisoMovimentacoes, 
                    string renovacaoCadastral, 
                    string codigoNacionalidade, 
                    string paisResidencia, 
                    string resolucao2689, 
                    string contaOrdem, 
                    string codigoLocalidade, 
                    string dataConstituicao, 
                    string numeroDDD2, 
                    string telefone2, 
                    string ramal2, 
                    string numeroDDD3, 
                    string telefone3, 
                    string ramal3, 
                    string numeroIdentificacaoFiscal, 
                    string dataComunicadoFormalizacaoSaida, 
                    string dataInicioResidente, 
                    string dataFimResidente, 
                    string cotistaVinculado, 
                    string emissaoInformeRendimentos, 
                    string emissaoAlteracaoCadastral, 
                    string emissaoMalaDireta, 
                    object userState) {
            if ((this.alterarCotistaPJOperationCompleted == null)) {
                this.alterarCotistaPJOperationCompleted = new System.Threading.SendOrPostCallback(this.OnalterarCotistaPJOperationCompleted);
            }
            this.InvokeAsync("alterarCotistaPJ", new object[] {
                        ebusiness,
                        senha,
                        codigoBancoGestor,
                        codigoBancoCliente,
                        codigoCotista,
                        tipoDocumentoCotista,
                        numeroDocumentoCotista,
                        dataExpedicaoDocumentoCotista,
                        orgaoExpeditorDocumento,
                        estadoEmissorDocumentoCotista,
                        indicadorImposto,
                        ramoAtividade,
                        codigoFormaConstituicaoEmp,
                        numeroDDD1,
                        telefone1,
                        ramal1,
                        email,
                        assessor,
                        idCotistaGestor,
                        idExtratoMensal,
                        emissaoExtratoMovimentacoes,
                        tipoCotista,
                        valorRendaEmpresa,
                        valorPatrimonio,
                        codigoCetip,
                        codigoDistribuidor,
                        indicadorPEP,
                        avisoMovimentacoes,
                        renovacaoCadastral,
                        codigoNacionalidade,
                        paisResidencia,
                        resolucao2689,
                        contaOrdem,
                        codigoLocalidade,
                        dataConstituicao,
                        numeroDDD2,
                        telefone2,
                        ramal2,
                        numeroDDD3,
                        telefone3,
                        ramal3,
                        numeroIdentificacaoFiscal,
                        dataComunicadoFormalizacaoSaida,
                        dataInicioResidente,
                        dataFimResidente,
                        cotistaVinculado,
                        emissaoInformeRendimentos,
                        emissaoAlteracaoCadastral,
                        emissaoMalaDireta}, this.alterarCotistaPJOperationCompleted, userState);
        }
        
        private void OnalterarCotistaPJOperationCompleted(object arg) {
            if ((this.alterarCotistaPJCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.alterarCotistaPJCompleted(this, new alterarCotistaPJCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://service.passivo.itau.com", ResponseNamespace="http://service.passivo.itau.com")]
        [return: System.Xml.Serialization.SoapElementAttribute("inserirCotitularReturn")]
        public string inserirCotitular(
                    string ebusiness, 
                    string senha, 
                    string codigoBancoGestor, 
                    string codigoBancoCliente, 
                    string codigoCotista, 
                    string nomeCoTitular, 
                    string cpfCotitular, 
                    string dataNascimentoCotitular, 
                    string situacaoLegalCotitular, 
                    string sexoCotitular, 
                    string profissaoCotitular, 
                    string estadoCivilCotitular, 
                    string tipoDocumentoCotitular, 
                    string numeroDocumentoCotitular, 
                    string dataExpedicaoDocumentoCotitular, 
                    string orgaoExpedidorDocumentoCotitular, 
                    string estadoExpedidorDocumentoCotitular, 
                    string rendaCotitular, 
                    string patrimonioCotitular) {
            object[] results = this.Invoke("inserirCotitular", new object[] {
                        ebusiness,
                        senha,
                        codigoBancoGestor,
                        codigoBancoCliente,
                        codigoCotista,
                        nomeCoTitular,
                        cpfCotitular,
                        dataNascimentoCotitular,
                        situacaoLegalCotitular,
                        sexoCotitular,
                        profissaoCotitular,
                        estadoCivilCotitular,
                        tipoDocumentoCotitular,
                        numeroDocumentoCotitular,
                        dataExpedicaoDocumentoCotitular,
                        orgaoExpedidorDocumentoCotitular,
                        estadoExpedidorDocumentoCotitular,
                        rendaCotitular,
                        patrimonioCotitular});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void inserirCotitularAsync(
                    string ebusiness, 
                    string senha, 
                    string codigoBancoGestor, 
                    string codigoBancoCliente, 
                    string codigoCotista, 
                    string nomeCoTitular, 
                    string cpfCotitular, 
                    string dataNascimentoCotitular, 
                    string situacaoLegalCotitular, 
                    string sexoCotitular, 
                    string profissaoCotitular, 
                    string estadoCivilCotitular, 
                    string tipoDocumentoCotitular, 
                    string numeroDocumentoCotitular, 
                    string dataExpedicaoDocumentoCotitular, 
                    string orgaoExpedidorDocumentoCotitular, 
                    string estadoExpedidorDocumentoCotitular, 
                    string rendaCotitular, 
                    string patrimonioCotitular) {
            this.inserirCotitularAsync(ebusiness, senha, codigoBancoGestor, codigoBancoCliente, codigoCotista, nomeCoTitular, cpfCotitular, dataNascimentoCotitular, situacaoLegalCotitular, sexoCotitular, profissaoCotitular, estadoCivilCotitular, tipoDocumentoCotitular, numeroDocumentoCotitular, dataExpedicaoDocumentoCotitular, orgaoExpedidorDocumentoCotitular, estadoExpedidorDocumentoCotitular, rendaCotitular, patrimonioCotitular, null);
        }
        
        /// <remarks/>
        public void inserirCotitularAsync(
                    string ebusiness, 
                    string senha, 
                    string codigoBancoGestor, 
                    string codigoBancoCliente, 
                    string codigoCotista, 
                    string nomeCoTitular, 
                    string cpfCotitular, 
                    string dataNascimentoCotitular, 
                    string situacaoLegalCotitular, 
                    string sexoCotitular, 
                    string profissaoCotitular, 
                    string estadoCivilCotitular, 
                    string tipoDocumentoCotitular, 
                    string numeroDocumentoCotitular, 
                    string dataExpedicaoDocumentoCotitular, 
                    string orgaoExpedidorDocumentoCotitular, 
                    string estadoExpedidorDocumentoCotitular, 
                    string rendaCotitular, 
                    string patrimonioCotitular, 
                    object userState) {
            if ((this.inserirCotitularOperationCompleted == null)) {
                this.inserirCotitularOperationCompleted = new System.Threading.SendOrPostCallback(this.OninserirCotitularOperationCompleted);
            }
            this.InvokeAsync("inserirCotitular", new object[] {
                        ebusiness,
                        senha,
                        codigoBancoGestor,
                        codigoBancoCliente,
                        codigoCotista,
                        nomeCoTitular,
                        cpfCotitular,
                        dataNascimentoCotitular,
                        situacaoLegalCotitular,
                        sexoCotitular,
                        profissaoCotitular,
                        estadoCivilCotitular,
                        tipoDocumentoCotitular,
                        numeroDocumentoCotitular,
                        dataExpedicaoDocumentoCotitular,
                        orgaoExpedidorDocumentoCotitular,
                        estadoExpedidorDocumentoCotitular,
                        rendaCotitular,
                        patrimonioCotitular}, this.inserirCotitularOperationCompleted, userState);
        }
        
        private void OninserirCotitularOperationCompleted(object arg) {
            if ((this.inserirCotitularCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.inserirCotitularCompleted(this, new inserirCotitularCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void atualizarHoldMailCompletedEventHandler(object sender, atualizarHoldMailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class atualizarHoldMailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal atualizarHoldMailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void encerrarContaCompletedEventHandler(object sender, encerrarContaCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class encerrarContaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal encerrarContaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void bloquearDesbloquearCotistaCompletedEventHandler(object sender, bloquearDesbloquearCotistaCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class bloquearDesbloquearCotistaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal bloquearDesbloquearCotistaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void aprovarAlteracaoCadastralCotistaCompletedEventHandler(object sender, aprovarAlteracaoCadastralCotistaCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class aprovarAlteracaoCadastralCotistaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal aprovarAlteracaoCadastralCotistaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void alterarSituacaoLegalCotistaCompletedEventHandler(object sender, alterarSituacaoLegalCotistaCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class alterarSituacaoLegalCotistaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal alterarSituacaoLegalCotistaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void cadastrarAlterarExcluirEnderecoCotistaCompletedEventHandler(object sender, cadastrarAlterarExcluirEnderecoCotistaCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class cadastrarAlterarExcluirEnderecoCotistaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal cadastrarAlterarExcluirEnderecoCotistaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void cadastrarCotistaPFParcialCompletedEventHandler(object sender, cadastrarCotistaPFParcialCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class cadastrarCotistaPFParcialCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal cadastrarCotistaPFParcialCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void cadastrarCotistaPFCompletoCompletedEventHandler(object sender, cadastrarCotistaPFCompletoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class cadastrarCotistaPFCompletoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal cadastrarCotistaPFCompletoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void cadastrarCotistaPJParcialCompletedEventHandler(object sender, cadastrarCotistaPJParcialCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class cadastrarCotistaPJParcialCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal cadastrarCotistaPJParcialCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void cadastrarCotistaPJCompletoCompletedEventHandler(object sender, cadastrarCotistaPJCompletoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class cadastrarCotistaPJCompletoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal cadastrarCotistaPJCompletoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void alterarNomeCpfCnpjCotistaCompletedEventHandler(object sender, alterarNomeCpfCnpjCotistaCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class alterarNomeCpfCnpjCotistaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal alterarNomeCpfCnpjCotistaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void alterarCotistaPFCompletedEventHandler(object sender, alterarCotistaPFCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class alterarCotistaPFCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal alterarCotistaPFCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void alterarCotistaPJCompletedEventHandler(object sender, alterarCotistaPJCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class alterarCotistaPJCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal alterarCotistaPJCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void inserirCotitularCompletedEventHandler(object sender, inserirCotitularCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class inserirCotitularCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal inserirCotitularCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591